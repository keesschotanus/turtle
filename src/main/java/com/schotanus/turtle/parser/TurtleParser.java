/* TurtleParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. TurtleParser.java */
package com.schotanus.turtle.parser;

/**
 * Parser for the Turtle language.
 * <br>The Turtle language borrows heavily from the Logo language but some
 * important changes have been made that are documented separately.
 * @author Kees Schotanus
 * @version 1.0
 */
public class TurtleParser/*@bgen(jjtree)*/implements TurtleParserTreeConstants, TurtleParserConstants {/*@bgen(jjtree)*/
  protected static JJTTurtleParserState jjtree = new JJTTurtleParserState();
    /**
     * Driver method that reads from standard in and dumps the input in the form of
     * a tree to standard out.
     * @param args Not used.
     */
    public static void main(String args[]) throws ParseException {
        TurtleParser parser = new TurtleParser(System.in);
        try {
            SimpleNode node = parser.parseUnit();
            System.out.println("Input:" + node);
            node.dump(">");
            parser.jjtree.rootNode().interpret();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

/**
 * Complete unit that can be parsed. As you can see a unit consists of function
 * declarations and statements followed by EOF.
 */
  static final public SimpleNode parseUnit() throws ParseException {/*@bgen(jjtree) ParseUnit */
  NodeParseUnit jjtn000 = new NodeParseUnit(null, JJTPARSEUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BACK:
        case BACKGROUND:
        case CLEAR:
        case FORWARD:
        case HEAD:
        case HIDE:
        case HOME:
        case IF:
        case LEFT:
        case PEN:
        case PRINT:
        case REPEAT:
        case RIGHT:
        case SHOW:
        case TO:
        case TURTLE:
        case WHILE:
        case LBRACKET:
        case NAME:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TO:{
          FunctionDeclaration();
          break;
          }
        case BACK:
        case BACKGROUND:
        case CLEAR:
        case FORWARD:
        case HEAD:
        case HIDE:
        case HOME:
        case IF:
        case LEFT:
        case PEN:
        case PRINT:
        case REPEAT:
        case RIGHT:
        case SHOW:
        case TURTLE:
        case WHILE:
        case LBRACKET:
        case NAME:{
          Statement();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

/**
 * Declaration of a Turtle function like:
 * TO SQUARE :SIZE [REPEAT 4 [FORWARD :SIZE RIGHT 90]]
 * Logo uses an END statement to specify the end of the function declaration and
 * has no special token to state the beginning of the function. Turtle enforces
 * the use of a statement block to define the function.
 */
  static final public void FunctionDeclaration() throws ParseException {/*@bgen(jjtree) FunctionDeclaration */
 NodeFunctionDeclaration jjtn000 = new NodeFunctionDeclaration(null, JJTFUNCTIONDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token name;
    try {
      jj_consume_token(TO);
      name = jj_consume_token(NAME);
NodeFormalArguments jjtn001 = new NodeFormalArguments(null, JJTFORMALARGUMENTS);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VARIABLE:{
            ;
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          Variable();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
      }
      StatementBlock();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(name.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/**
 * Turtle defines a statement block as one or more statements within square
 * brackets. This replaces Logos BEGIN and END keywords.
 */
  static final public void StatementBlock() throws ParseException {/*@bgen(jjtree) StatementBlock */
  NodeStatementBlock jjtn000 = new NodeStatementBlock(null, JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      label_3:
      while (true) {
        Statement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BACK:
        case BACKGROUND:
        case CLEAR:
        case FORWARD:
        case HEAD:
        case HIDE:
        case HOME:
        case IF:
        case LEFT:
        case PEN:
        case PRINT:
        case REPEAT:
        case RIGHT:
        case SHOW:
        case TURTLE:
        case WHILE:
        case LBRACKET:
        case NAME:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  NodeStatement jjtn000 = new NodeStatement(null, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BACKGROUND:{
        BackgroundColorStatement();
        break;
        }
      case BACK:
      case FORWARD:{
        BackOrForwardStatement();
        break;
        }
      case CLEAR:{
        ClearStatement();
        break;
        }
      case NAME:{
        FunctionCall();
        break;
        }
      case HEAD:{
        HeadStatement();
        break;
        }
      case HOME:{
        HomeStatement();
        break;
        }
      case IF:{
        IfStatement();
        break;
        }
      case LEFT:
      case RIGHT:{
        LeftOrRightStatement();
        break;
        }
      case PEN:{
        PenStatement();
        break;
        }
      case PRINT:{
        PrintStatement();
        break;
        }
      case REPEAT:{
        RepeatStatement();
        break;
        }
      case HIDE:
      case SHOW:{
        ShowOrHideTurtleStatement();
        break;
        }
      case LBRACKET:{
        StatementBlock();
        break;
        }
      case TURTLE:{
        UseTurtleStatement();
        break;
        }
      case WHILE:{
        WhileStatement();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/**
 * Changes the background color.
 * Logo doesn't need COMMAs between the red, green and blue parameter but
 * Turtle does since it allows for easier parsing. Not using commas forces you
 * to determine where a parameter expression starts and ends.
 */
  static final public void BackgroundColorStatement() throws ParseException {/*@bgen(jjtree) BackgroundColorStatement */
  NodeBackgroundColorStatement jjtn000 = new NodeBackgroundColorStatement(null, JJTBACKGROUNDCOLORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BACKGROUND);
      jj_consume_token(COLOR);
      Expression();
      jj_consume_token(COMMA);
      Expression();
      jj_consume_token(COMMA);
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void BackOrForwardStatement() throws ParseException {/*@bgen(jjtree) BackOrForwardStatement */
  NodeBackOrForwardStatement jjtn000 = new NodeBackOrForwardStatement(null, JJTBACKORFORWARDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BACK:{
        jj_consume_token(BACK);
        Expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setForward(false);
        break;
        }
      case FORWARD:{
        jj_consume_token(FORWARD);
        Expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setForward(true);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ClearStatement() throws ParseException {/*@bgen(jjtree) ClearStatement */
  NodeClearStatement jjtn000 = new NodeClearStatement(null, JJTCLEARSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLEAR);
      jj_consume_token(SCREEN);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/**
 * Call to a Turtle function. Turtle forces you to separate parameters with
 * COMMAs but Logo doesn't.
 */
  static final public void FunctionCall() throws ParseException {/*@bgen(jjtree) FunctionCall */
 NodeFunctionCall jjtn000 = new NodeFunctionCall(null, JJTFUNCTIONCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(NAME);
NodeActualArguments jjtn001 = new NodeActualArguments(null, JJTACTUALARGUMENTS);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COSINE:
        case REPCOUNT:
        case SINE:
        case LPARENS:
        case MINUS:
        case CONSTANT:
        case VARIABLE:{
          Expression();
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              break label_4;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(token.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void HeadStatement() throws ParseException {/*@bgen(jjtree) HeadStatement */
  NodeHeadStatement jjtn000 = new NodeHeadStatement(null, JJTHEADSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HEAD);
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void HomeStatement() throws ParseException {/*@bgen(jjtree) HomeStatement */
  NodeHomeStatement jjtn000 = new NodeHomeStatement(null, JJTHOMESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HOME);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/**
 * Different Logo versions use different IF statements. Turtles IF statement
 * re-uses the definition of a statement block.
 */
  static final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  NodeIfStatement jjtn000 = new NodeIfStatement(null, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      RelationalExpression();
      StatementBlock();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        StatementBlock();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void LeftOrRightStatement() throws ParseException {/*@bgen(jjtree) LeftOrRightStatement */
  NodeLeftOrRightStatement jjtn000 = new NodeLeftOrRightStatement(null, JJTLEFTORRIGHTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT:{
        jj_consume_token(LEFT);
        Expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setLeft(true);
        break;
        }
      case RIGHT:{
        jj_consume_token(RIGHT);
        Expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setLeft(false);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/**
 * Collection of PEN statements. For some PEN statements Logo uses the SET
 * keyword but Turtle does without a SET keyword.
 */
  static final public void PenStatement() throws ParseException {
    jj_consume_token(PEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOWN:
    case UP:{
NodePenUpOrDownStatement jjtn001 = new NodePenUpOrDownStatement(null, JJTPENUPORDOWNSTATEMENT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UP:{
          jj_consume_token(UP);
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
jjtn001.setDown(false);
          break;
          }
        case DOWN:{
          jj_consume_token(DOWN);
jjtree.closeNodeScope(jjtn001, true);
                                                        jjtc001 = false;
jjtn001.setDown(true);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      break;
      }
    case COLOR:{
      jj_consume_token(COLOR);
NodePenColorStatement jjtn002 = new NodePenColorStatement(null, JJTPENCOLORSTATEMENT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
      try {
        Expression();
        jj_consume_token(COMMA);
        Expression();
        jj_consume_token(COMMA);
        Expression();
      } catch (Throwable jjte002) {
if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte002;}
                      }
                      if (jjte002 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte002;}
                      }
                      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
      }
      break;
      }
    case POSITION:{
      jj_consume_token(POSITION);
NodePenPositionStatement jjtn003 = new NodePenPositionStatement(null, JJTPENPOSITIONSTATEMENT);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
      try {
        Expression();
        jj_consume_token(COMMA);
        Expression();
      } catch (Throwable jjte003) {
if (jjtc003) {
                           jjtree.clearNodeScope(jjtn003);
                           jjtc003 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte003 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte003;}
                         }
                         if (jjte003 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte003;}
                         }
                         {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                         }
      }
      break;
      }
    case XPOSITION:{
      jj_consume_token(XPOSITION);
NodePenXPositionStatement jjtn004 = new NodePenXPositionStatement(null, JJTPENXPOSITIONSTATEMENT);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
      try {
        Expression();
      } catch (Throwable jjte004) {
if (jjtc004) {
                            jjtree.clearNodeScope(jjtn004);
                            jjtc004 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte004 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte004;}
                          }
                          if (jjte004 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte004;}
                          }
                          {if (true) throw (Error)jjte004;}
      } finally {
if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004, true);
                          }
      }
      break;
      }
    case YPOSITION:{
      jj_consume_token(YPOSITION);
NodePenYPositionStatement jjtn005 = new NodePenYPositionStatement(null, JJTPENYPOSITIONSTATEMENT);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
      try {
        Expression();
      } catch (Throwable jjte005) {
if (jjtc005) {
                            jjtree.clearNodeScope(jjtn005);
                            jjtc005 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte005 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte005;}
                          }
                          if (jjte005 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte005;}
                          }
                          {if (true) throw (Error)jjte005;}
      } finally {
if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
 * Print statement to output literals and the value of expressions. This
 * statement allows you to write things like:
 * PRINT "2+3*4=", 2+3*4
 * Turtle allows an empty PRINT statements that forces a new line.
 */
  static final public void PrintStatement() throws ParseException {/*@bgen(jjtree) PrintStatement */
 NodePrintStatement jjtn000 = new NodePrintStatement(null, JJTPRINTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token token;
    try {
      jj_consume_token(PRINT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COSINE:
      case REPCOUNT:
      case SINE:
      case LPARENS:
      case MINUS:
      case CONSTANT:
      case STRING_LITERAL:
      case VARIABLE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COSINE:
        case REPCOUNT:
        case SINE:
        case LPARENS:
        case MINUS:
        case CONSTANT:
        case VARIABLE:{
          Expression();
          break;
          }
        case STRING_LITERAL:{
          token = jj_consume_token(STRING_LITERAL);
NodeStringLiteral jjtn001 = new NodeStringLiteral(null, JJTSTRINGLITERAL);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001, true);
                                                jjtc001 = false;
jjtn001.setText(token.image);
          } finally {
if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001, true);
                                                }
          }
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COSINE:
          case REPCOUNT:
          case SINE:
          case LPARENS:
          case MINUS:
          case CONSTANT:
          case VARIABLE:{
            Expression();
            break;
            }
          case STRING_LITERAL:{
            token = jj_consume_token(STRING_LITERAL);
NodeStringLiteral jjtn002 = new NodeStringLiteral(null, JJTSTRINGLITERAL);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
            try {
jjtree.closeNodeScope(jjtn002, true);
                                                          jjtc002 = false;
jjtn002.setText(token.image);
            } finally {
if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002, true);
                                                          }
            }
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/**
 * Turtle repeat statement that also uses a statement block.
 */
  static final public void RepeatStatement() throws ParseException {/*@bgen(jjtree) RepeatStatement */
  NodeRepeatStatement jjtn000 = new NodeRepeatStatement(null, JJTREPEATSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPEAT);
      Expression();
      StatementBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ShowOrHideTurtleStatement() throws ParseException {/*@bgen(jjtree) ShowOrHideTurtleStatement */
  NodeShowOrHideTurtleStatement jjtn000 = new NodeShowOrHideTurtleStatement(null, JJTSHOWORHIDETURTLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SHOW:{
        jj_consume_token(SHOW);
        jj_consume_token(TURTLE);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setShow(true);
        break;
        }
      case HIDE:{
        jj_consume_token(HIDE);
        jj_consume_token(TURTLE);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setShow(false);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void UseTurtleStatement() throws ParseException {/*@bgen(jjtree) UseTurtleStatement */
  NodeUseTurtleStatement jjtn000 = new NodeUseTurtleStatement(null, JJTUSETURTLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TURTLE);
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/**
 * Turtles unique while statement.
 */
  static final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
  NodeWhileStatement jjtn000 = new NodeWhileStatement(null, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      RelationalExpression();
      StatementBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

/**
 * Relational expressions ==, <, <=, >, >=, !=
 * As you can see: Turtle uses the relational operators from C instead of the
 * Logo language.
 */
  static final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:
      case GT:
      case GTE:
      case LT:
      case LTE:
      case UNEQUAL:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
NodeEqualToExpression jjtn001 = new NodeEqualToExpression(null, JJTEQUALTOEXPRESSION);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
        }
        break;
        }
      case LT:{
        jj_consume_token(LT);
NodeLessThanExpression jjtn002 = new NodeLessThanExpression(null, JJTLESSTHANEXPRESSION);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
        try {
          AdditiveExpression();
        } catch (Throwable jjte002) {
if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
        }
        break;
        }
      case LTE:{
        jj_consume_token(LTE);
NodeLessThanOrEqualToExpression jjtn003 = new NodeLessThanOrEqualToExpression(null, JJTLESSTHANOREQUALTOEXPRESSION);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
        try {
          AdditiveExpression();
        } catch (Throwable jjte003) {
if (jjtc003) {
                      jjtree.clearNodeScope(jjtn003);
                      jjtc003 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte003;}
                    }
                    if (jjte003 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte003;}
                    }
                    {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003,  2);
                    }
        }
        break;
        }
      case GT:{
        jj_consume_token(GT);
NodeGreaterThanExpression jjtn004 = new NodeGreaterThanExpression(null, JJTGREATERTHANEXPRESSION);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
        try {
          AdditiveExpression();
        } catch (Throwable jjte004) {
if (jjtc004) {
                      jjtree.clearNodeScope(jjtn004);
                      jjtc004 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte004 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte004;}
                    }
                    if (jjte004 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte004;}
                    }
                    {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004,  2);
                    }
        }
        break;
        }
      case GTE:{
        jj_consume_token(GTE);
NodeGreaterThanOrEqualToExpression jjtn005 = new NodeGreaterThanOrEqualToExpression(null, JJTGREATERTHANOREQUALTOEXPRESSION);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
        try {
          AdditiveExpression();
        } catch (Throwable jjte005) {
if (jjtc005) {
                      jjtree.clearNodeScope(jjtn005);
                      jjtc005 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte005 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte005;}
                    }
                    if (jjte005 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte005;}
                    }
                    {if (true) throw (Error)jjte005;}
        } finally {
if (jjtc005) {
                      jjtree.closeNodeScope(jjtn005,  2);
                    }
        }
        break;
        }
      case UNEQUAL:{
        jj_consume_token(UNEQUAL);
NodeUnequalToExpression jjtn006 = new NodeUnequalToExpression(null, JJTUNEQUALTOEXPRESSION);
                    boolean jjtc006 = true;
                    jjtree.openNodeScope(jjtn006);
        try {
          AdditiveExpression();
        } catch (Throwable jjte006) {
if (jjtc006) {
                      jjtree.clearNodeScope(jjtn006);
                      jjtc006 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte006 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte006;}
                    }
                    if (jjte006 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte006;}
                    }
                    {if (true) throw (Error)jjte006;}
        } finally {
if (jjtc006) {
                      jjtree.closeNodeScope(jjtn006,  2);
                    }
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void Expression() throws ParseException {
    AdditiveExpression();
}

/**
 * Add and subtract containing multiplicative expressions since multiplication
 * has to be performed before adding/subtracting.
 */
  static final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
NodeAddExpression jjtn001 = new NodeAddExpression(null, JJTADDEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
NodeSubtractExpression jjtn002 = new NodeSubtractExpression(null, JJTSUBTRACTEXPRESSION);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
        }
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/**
 * Multiplication and division containing power expressions since exponentiation
 * has to be performed before multiplication/division.
 */
  static final public void MultiplicativeExpression() throws ParseException {
    PowerExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIVIDE:
      case MULTIPLY:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:{
        jj_consume_token(MULTIPLY);
NodeMultiplyExpression jjtn001 = new NodeMultiplyExpression(null, JJTMULTIPLYEXPRESSION);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
          PowerExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
        }
        break;
        }
      case DIVIDE:{
        jj_consume_token(DIVIDE);
NodeDivideExpression jjtn002 = new NodeDivideExpression(null, JJTDIVIDEEXPRESSION);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
        try {
          PowerExpression();
        } catch (Throwable jjte002) {
if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                     }
        }
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/**
 * Exponentiation. Since exponentiation should be evaluated from right to left
 * I used a right recursive expression that looks ahead for other power
 * expressions to the right. This is better explained in a JavaWorld article
 * about javacc.
 */
  static final public void PowerExpression() throws ParseException {
NodePowerExpression jjtn001 = new NodePowerExpression(null, JJTPOWEREXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
      label_9:
      while (true) {
        if (jj_2_1(2147483647)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(POWER);
        PowerExpression();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
}

/**
 * A unary expression might be 3 or -3.
 */
  static final public void UnaryExpression() throws ParseException {/*@bgen(jjtree) UnaryExpression */
  NodeUnaryExpression jjtn000 = new NodeUnaryExpression(null, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:{
        jj_consume_token(MINUS);
jjtn000.setSign(-1);
        Element();
        break;
        }
      case COSINE:
      case REPCOUNT:
      case SINE:
      case LPARENS:
      case CONSTANT:
      case VARIABLE:{
        Element();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPARENS:{
      jj_consume_token(LPARENS);
      Expression();
      jj_consume_token(RPARENS);
      break;
      }
    case COSINE:
    case SINE:{
      ArithmeticFunctionCall();
      break;
      }
    case CONSTANT:{
      Constant();
      break;
      }
    case REPCOUNT:{
      RepCount();
      break;
      }
    case VARIABLE:{
      Variable();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
 * Arithmetic functions. Unlike Turtle functions arithmetic functions should
 * be called using parenthesis like SIN(30)
 */
  static final public void ArithmeticFunctionCall() throws ParseException {Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SINE:{
NodeSineFunction jjtn001 = new NodeSineFunction(null, JJTSINEFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(SINE);
        jj_consume_token(LPARENS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COSINE:
        case REPCOUNT:
        case SINE:
        case LPARENS:
        case MINUS:
        case CONSTANT:
        case VARIABLE:{
          Expression();
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(RPARENS);
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
      }
    case COSINE:{
NodeCosineFunction jjtn002 = new NodeCosineFunction(null, JJTCOSINEFUNCTION);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(COSINE);
        jj_consume_token(LPARENS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COSINE:
        case REPCOUNT:
        case SINE:
        case LPARENS:
        case MINUS:
        case CONSTANT:
        case VARIABLE:{
          Expression();
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(RPARENS);
      } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Constant() throws ParseException {/*@bgen(jjtree) Constant */
  NodeConstant jjtn000 = new NodeConstant(null, JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(CONSTANT);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setValue(Double.parseDouble(token.image));
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void RepCount() throws ParseException {/*@bgen(jjtree) RepCount */
  NodeRepCount jjtn000 = new NodeRepCount(null, JJTREPCOUNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPCOUNT);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Variable() throws ParseException {/*@bgen(jjtree) Variable */
  NodeVariable jjtn000 = new NodeVariable(null, JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(VARIABLE);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TurtleParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x39afe1c0,0x39afe1c0,0x0,0x29afe1c0,0x29afe1c0,0x2040,0x0,0x4400400,0x1000,0x1040000,0x40000800,0xc0100a00,0x4400400,0x0,0x4400400,0x4400400,0x8008000,0x0,0x0,0x0,0x0,0x0,0x0,0x4400400,0x4400400,0x4400400,0x4400400,0x4000400,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x4000011,0x4000011,0x8000000,0x4000011,0x4000011,0x0,0x8,0x8200820,0x0,0x0,0x0,0x2,0xa200820,0x8,0xa200820,0xa200820,0x0,0x1f8000,0x1f8000,0x2800,0x2800,0x1400,0x1400,0x8200820,0x8200020,0x8200820,0x8200820,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TurtleParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TurtleParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TurtleParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TurtleParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TurtleParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TurtleParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TurtleParser(TurtleParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TurtleParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[60];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 28; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 60; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
